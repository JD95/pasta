foo : (Int | String | Bool) -> String
foo (Inj 0 _) = "It's an Int"
foo (Inj 1 _) = "It's a String"
foo (Inj 2 _) = "It's a Bool"

bar : (Int, String, Bool) -> String
bar x = "I've got a "
      <> show (x @ 0)
      <> " and a "
      <> show (x @ 1)
      <> " and a "
      <> show (x @ 2)

bleh : { age: Int, name: String, cool: Bool } -> String
bleh x = if x @ cool
  then "Is cool"
  else "Is not cool"

mkBar : Bool -> (Double | String)
mkBar True = Inj 0 5.0
mkBar False = Inj 1 "Hello"

mkBar : Bool -> (Double | String)
mkBar True = Inj Double 5.0
mkBar False = Inj String "Hello"

someFunc 1 2 3

let someVar = 5
in (\x y -> x + y + someVar) 6

if : (a : Type; 0)
  -> (cond : Bool)      -- Condition to check
  -> (truePath : a; 1!)  -- Code to run if condition is true
  -> (falsePath : a; u~) -- Code to run if condition is false
  -> a                  -- Result of running either branch 

func (x; 1) = (x : list1, x : list2)

func : Int; 1# -> String; ! -> Bool; ~ -> Person

void add1(int* a);

int value = new int(5);
add1(value*);
add1(value*);
add1(value*);
add1(value*);
add1(value*);
return value;